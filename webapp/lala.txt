<ref *4> IncomingMessage {
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 1185842
  },
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 59773016
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 34340940,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
            'jsonp callback name': 'callback',
            'view engine': 'ejs'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                route: Route {
                  path: '/',
                  stack: [
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/user_info\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/user_info',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: {},
                path: '/something_private',
                keys: [],
                regexp: /^\/something_private\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/something_private',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: serveStatic],
                name: 'serveStatic',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/static\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::9090',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 8,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 463,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 10,
        [Symbol(triggerId)]: 9
      }
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
            'jsonp callback name': 'callback',
            'view engine': 'ejs'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                route: Route {
                  path: '/',
                  stack: [
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/user_info\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/user_info',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: {},
                path: '/something_private',
                keys: [],
                regexp: /^\/something_private\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/something_private',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: serveStatic],
                name: 'serveStatic',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/static\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::9090',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 8,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 463,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 10,
        [Symbol(triggerId)]: 9
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: [Circular *4],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *3],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *4],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      writeHead: [Function: writeHead],
      oidc: ResponseContext {},
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 13,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Host',
    'localhost:9090',
    'Connection',
    'keep-alive',
    'sec-ch-ua',
    '"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
    'sec-ch-ua-mobile',
    '?0',
    'sec-ch-ua-platform',
    '"Windows"',
    'Upgrade-Insecure-Requests',
    '1',
    'User-Agent',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
    'Accept',
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Sec-Fetch-Site',
    'none',
    'Sec-Fetch-Mode',
    'navigate',
    'Sec-Fetch-User',
    '?1',
    'Sec-Fetch-Dest',
    'document',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Accept-Language',
    'el,en;q=0.9,en-GB;q=0.8,en-US;q=0.7',
    'Cookie',
    'auth_verification=%7B%22nonce%22%3A%22yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4%22%2C%22state%22%3A%22eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9%22%7D.gml510a3NW_AbsfzfZF-99Xs3d6JcS-NlIDGC5Aocks; _auth_verification=%7B%22nonce%22%3A%22yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4%22%2C%22state%22%3A%22eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9%22%7D.dR97yTakfz3xK9ITT_jXjg79R5VSS-NFd32HxjGGp0Y; appSession=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaWF0IjoxNzExNDgzMjE3LCJ1YXQiOjE3MTE0ODU3MDIsImV4cCI6MTcxMTU3MjEwMn0..uJBqn9tKeJ6h43uE.__GQ79YXeCce3EQhoCB5ECXIY0nLb8HkN9yB4rgSSSJKVJ5sxBLtFuXc5lsw4eb10lPU2d7i5QHMWXg3LKUfuNHoFUlA9RMI3XXTHQg9m3hADe3PXGfKgr9RYs-4GPlOtWh-oHilm_Fxa6W-vu9v_e8w9q4iDclrtJJcQ942o-Qy4bc8beTG3hrHj0FK3TdepAiFQRUTBZDbU5JpqVLcb-Ksnrnn6xqCD2XS5igkcqwcZn3dJK0zshKJYc_0wrnqe8cDVWFj6ION7L2uhXzV-yIbAwsfmgVzl_FncreZH4eaqTAmpytJcHxLMh6Y8jh2F8JK2PtREpggGDEOyscKQWs86yFuPd7PW3imgSzMD2f3wCpx72LIV0MNyVV4aereaIZgwlAUVJIwniMx-r6oIy2ZEn3HPHK_bvZvUnjA8jwTYr8QpXtwqA1oTPwEymBxrsgw-CNR9J2HNkWYIuf86uZSMB8JKn_Z4mj84s9t-W10jXNQG_njLu-U02frp9LWx7jEfVjO9gEAxvbGnKWpZ1tIhjBNkClKwhz4qr4Ni3mqx5kKMuhJ0QPYkNFgQVfzA7vZI73WUcp270SnlRSBZj8MF5Sq05nuyatX3jGjnQSLgS3cDTwWXHbiEXzQJE558HLnWAUF5cqPskpBguMFu2dTCVHNTyaOwJs04RZw6d6UjLY17596_OjiYetdbHgzdH3JM5GTzSA4h_GlumfkFJDABVT8nooEwXGaJKnYmoNawXiWVEJes8QTAPVlt7KSrrNLa1kb5AeA-lbZYxP1MFkeE2tT0NNBF0AzYLJPjRZThmGojIv_gwo5mzEsB69OY2hkPkg1fvmuluh9Dr2H7Mlp_lET6pYv9k7SZMHBcos3U9faCwKrthyrDG3fGR_ZLfsXz802Qf1P0Z_0hUout5-8c_wXr9tbJrdJetyFQuSV-Nqzqbg_VmRRiSZA4T6xJWrlFood0T8v9ExvwPoE4AqGL_PrW-Dz5jO2fQjQaWFIPfbuWiGhtwQcsQJJsaxd1MgynIA1GyusmysiFzeRrva6wudUhpD7y4XrsEsiMJuO9OY6MHXM_2gl4wmIch-oGKHPWucsPwv-5FA0QjCygEF4274mw7f2MtqmVDWisPp507-EafloqfWD_YC-LQpqrWpn9wIVvD68zFuE4RS8MfrbPKAXujTfJOpVISouXTqF0V-msfJ_8NHYGRu1n6S7B73r8DQeASXxb1xMiQiGgaeRSbpfir_2hzEkwceao3OZM7JXWY-kJdmALWw3TlsUyEWO2N0USErbhDABngOhTDEQEum_9KuIh-EriBvbq22lxiDv3tPIgec84PgJlTHAUmdxyTUftIq3Qj8_F3p49KC4iWQWwTS77A-R-wtAIfplcUO4LGukc5buSAdgWJ2LC42GlKuj_7gdB0jK1AVeoSgU1gsn8ZG_Xr6UDwD-Fxsq9CiOwpTjkqpyK-si6mBeifgYWcav8_CvDvdcsrVlGoCeBQoVMqWJMC8HQle8Nqx8dI9tEr5NAXpLq3kW0ouXwOSbChMmhCvu6C3GyR4kH-VBtjMnomw3fCGWlgCZUybYJ-_hdDpnbzLAYlMVzKKQ9IEfXdxdN_nevEDOWicdVc6-RT7aSWqOTy4IW6s0jle4wFfIgmHS4jIB_RxtFupRwcy4ELppM7n3Xi-SsLdzxSz5TMVUzWy2xbyGoLjVkdmOx0skFg.whz2Q-9Kh5E3IwMh8ax2pg'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/something_private',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 59773016
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 34340940,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
            'jsonp callback name': 'callback',
            'view engine': 'ejs'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                route: Route {
                  path: '/',
                  stack: [
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/user_info\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/user_info',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: {},
                path: '/something_private',
                keys: [],
                regexp: /^\/something_private\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/something_private',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: serveStatic],
                name: 'serveStatic',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/static\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::9090',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 8,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 463,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 10,
        [Symbol(triggerId)]: 9
      }
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
            'jsonp callback name': 'callback',
            'view engine': 'ejs'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [AsyncFunction (anonymous)],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: /^\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: true
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/callback\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/callback',
                        stack: [
                          Layer {
                            handle: [Function: urlencodedParser],
                            name: 'urlencodedParser',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                route: Route {
                  path: '/',
                  stack: [
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/user_info\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/user_info',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: bound dispatch],
                name: 'bound dispatch',
                params: {},
                path: '/something_private',
                keys: [],
                regexp: /^\/something_private\/?$/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: Route {
                  path: '/something_private',
                  stack: [
                    Layer {
                      handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                      name: 'bound requiresLoginMiddleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    },
                    Layer {
                      handle: [Function (anonymous)],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                      method: 'get'
                    }
                  ],
                  methods: { get: true }
                }
              },
              Layer {
                handle: [Function: serveStatic],
                name: 'serveStatic',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/static\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::9090',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 8,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 463,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 10,
        [Symbol(triggerId)]: 9
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: [Circular *4],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *3],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *4],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      writeHead: [Function: writeHead],
      oidc: ResponseContext {},
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 13,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/something_private',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/something_private',
    path: '/something_private',
    href: '/something_private',
    _raw: '/something_private'
  },
  params: {},
  query: {},
  res: <ref *5> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: <ref *3> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 59773016
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 34340940,
        [Symbol(kBufferedValue)]: null
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/login\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/login',
                          stack: [
                            Layer {
                              handle: [Function: urlencodedParser],
                              name: 'urlencodedParser',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/logout\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/logout',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/callback\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/callback',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/callback\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/callback',
                          stack: [
                            Layer {
                              handle: [Function: urlencodedParser],
                              name: 'urlencodedParser',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/user_info\/?$/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: Route {
                    path: '/user_info',
                    stack: [
                      Layer {
                        handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                        name: 'bound requiresLoginMiddleware',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/something_private',
                  keys: [],
                  regexp: /^\/something_private\/?$/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: Route {
                    path: '/something_private',
                    stack: [
                      Layer {
                        handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                        name: 'bound requiresLoginMiddleware',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/static\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener],
          listening: [Function: setupConnectionsTracking]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::9090',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 8,
        [Symbol(kUniqueHeaders)]: null,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 463,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 10,
          [Symbol(triggerId)]: 9
        }
      },
      _server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
              'jsonp callback name': 'callback',
              'view engine': 'ejs'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\psikt\\OneDrive\\Υπολογιστής\\iot-website\\webapp\\views',
                'jsonp callback name': 'callback',
                'view engine': 'ejs'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: {},
                        path: '',
                        keys: [],
                        regexp: /^\/?(?=\/|$)/i {
                          fast_star: false,
                          fast_slash: true
                        },
                        route: undefined
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/login\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/login',
                          stack: [
                            Layer {
                              handle: [Function: urlencodedParser],
                              name: 'urlencodedParser',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/logout\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/logout',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/callback\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/callback',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/callback\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/callback',
                          stack: [
                            Layer {
                              handle: [Function: urlencodedParser],
                              name: 'urlencodedParser',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/user_info\/?$/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: Route {
                    path: '/user_info',
                    stack: [
                      Layer {
                        handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                        name: 'bound requiresLoginMiddleware',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/something_private',
                  keys: [],
                  regexp: /^\/something_private\/?$/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: Route {
                    path: '/something_private',
                    stack: [
                      Layer {
                        handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
                        name: 'bound requiresLoginMiddleware',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      },
                      Layer {
                        handle: [Function (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/static\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener],
          listening: [Function: setupConnectionsTracking]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::9090',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 8,
        [Symbol(kUniqueHeaders)]: null,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 463,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 10,
          [Symbol(triggerId)]: 9
        }
      },
      parser: HTTPParser {
        '0': null,
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *3],
        incoming: [Circular *4],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        joinDuplicateHeaders: null,
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *3]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *5],
      [Symbol(async_id_symbol)]: 13,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *3]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *4],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    writeHead: [Function: writeHead],
    oidc: ResponseContext {},
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  appSession: [Getter/Setter],
  oidc: RequestContext {},
  route: Route {
    path: '/something_private',
    stack: [
      Layer {
        handle: [Function: bound requiresLoginMiddleware] AsyncFunction,
        name: 'bound requiresLoginMiddleware',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'get'
      },
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'get'
      },
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'get'
      }
    ],
    methods: { get: true }
  },
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    host: 'localhost:9090',
    connection: 'keep-alive',
    'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'sec-fetch-site': 'none',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-user': '?1',
    'sec-fetch-dest': 'document',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'el,en;q=0.9,en-GB;q=0.8,en-US;q=0.7',
    cookie: 'auth_verification=%7B%22nonce%22%3A%22yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4%22%2C%22state%22%3A%22eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9%22%7D.gml510a3NW_AbsfzfZF-99Xs3d6JcS-NlIDGC5Aocks; _auth_verification=%7B%22nonce%22%3A%22yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4%22%2C%22state%22%3A%22eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9%22%7D.dR97yTakfz3xK9ITT_jXjg79R5VSS-NFd32HxjGGp0Y; appSession=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaWF0IjoxNzExNDgzMjE3LCJ1YXQiOjE3MTE0ODU3MDIsImV4cCI6MTcxMTU3MjEwMn0..uJBqn9tKeJ6h43uE.__GQ79YXeCce3EQhoCB5ECXIY0nLb8HkN9yB4rgSSSJKVJ5sxBLtFuXc5lsw4eb10lPU2d7i5QHMWXg3LKUfuNHoFUlA9RMI3XXTHQg9m3hADe3PXGfKgr9RYs-4GPlOtWh-oHilm_Fxa6W-vu9v_e8w9q4iDclrtJJcQ942o-Qy4bc8beTG3hrHj0FK3TdepAiFQRUTBZDbU5JpqVLcb-Ksnrnn6xqCD2XS5igkcqwcZn3dJK0zshKJYc_0wrnqe8cDVWFj6ION7L2uhXzV-yIbAwsfmgVzl_FncreZH4eaqTAmpytJcHxLMh6Y8jh2F8JK2PtREpggGDEOyscKQWs86yFuPd7PW3imgSzMD2f3wCpx72LIV0MNyVV4aereaIZgwlAUVJIwniMx-r6oIy2ZEn3HPHK_bvZvUnjA8jwTYr8QpXtwqA1oTPwEymBxrsgw-CNR9J2HNkWYIuf86uZSMB8JKn_Z4mj84s9t-W10jXNQG_njLu-U02frp9LWx7jEfVjO9gEAxvbGnKWpZ1tIhjBNkClKwhz4qr4Ni3mqx5kKMuhJ0QPYkNFgQVfzA7vZI73WUcp270SnlRSBZj8MF5Sq05nuyatX3jGjnQSLgS3cDTwWXHbiEXzQJE558HLnWAUF5cqPskpBguMFu2dTCVHNTyaOwJs04RZw6d6UjLY17596_OjiYetdbHgzdH3JM5GTzSA4h_GlumfkFJDABVT8nooEwXGaJKnYmoNawXiWVEJes8QTAPVlt7KSrrNLa1kb5AeA-lbZYxP1MFkeE2tT0NNBF0AzYLJPjRZThmGojIv_gwo5mzEsB69OY2hkPkg1fvmuluh9Dr2H7Mlp_lET6pYv9k7SZMHBcos3U9faCwKrthyrDG3fGR_ZLfsXz802Qf1P0Z_0hUout5-8c_wXr9tbJrdJetyFQuSV-Nqzqbg_VmRRiSZA4T6xJWrlFood0T8v9ExvwPoE4AqGL_PrW-Dz5jO2fQjQaWFIPfbuWiGhtwQcsQJJsaxd1MgynIA1GyusmysiFzeRrva6wudUhpD7y4XrsEsiMJuO9OY6MHXM_2gl4wmIch-oGKHPWucsPwv-5FA0QjCygEF4274mw7f2MtqmVDWisPp507-EafloqfWD_YC-LQpqrWpn9wIVvD68zFuE4RS8MfrbPKAXujTfJOpVISouXTqF0V-msfJ_8NHYGRu1n6S7B73r8DQeASXxb1xMiQiGgaeRSbpfir_2hzEkwceao3OZM7JXWY-kJdmALWw3TlsUyEWO2N0USErbhDABngOhTDEQEum_9KuIh-EriBvbq22lxiDv3tPIgec84PgJlTHAUmdxyTUftIq3Qj8_F3p49KC4iWQWwTS77A-R-wtAIfplcUO4LGukc5buSAdgWJ2LC42GlKuj_7gdB0jK1AVeoSgU1gsn8ZG_Xr6UDwD-Fxsq9CiOwpTjkqpyK-si6mBeifgYWcav8_CvDvdcsrVlGoCeBQoVMqWJMC8HQle8Nqx8dI9tEr5NAXpLq3kW0ouXwOSbChMmhCvu6C3GyR4kH-VBtjMnomw3fCGWlgCZUybYJ-_hdDpnbzLAYlMVzKKQ9IEfXdxdN_nevEDOWicdVc6-RT7aSWqOTy4IW6s0jle4wFfIgmHS4jIB_RxtFupRwcy4ELppM7n3Xi-SsLdzxSz5TMVUzWy2xbyGoLjVkdmOx0skFg.whz2Q-9Kh5E3IwMh8ax2pg'
  },
  [Symbol(kHeadersCount)]: 30,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0,
  [Symbol(cookies)]: {
    auth_verification: '{"nonce":"yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4","state":"eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9"}.gml510a3NW_AbsfzfZF-99Xs3d6JcS-NlIDGC5Aocks',
    _auth_verification: '{"nonce":"yB8HwwbLqzAhGjaj5n1fj2wA3gzWhoNJKKRySwCF5S4","state":"eyJyZXR1cm5UbyI6Ii9zb21ldGhpbmdfcHJpdmF0ZSJ9"}.dR97yTakfz3xK9ITT_jXjg79R5VSS-NFd32HxjGGp0Y',
    appSession: 'eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaWF0IjoxNzExNDgzMjE3LCJ1YXQiOjE3MTE0ODU3MDIsImV4cCI6MTcxMTU3MjEwMn0..uJBqn9tKeJ6h43uE.__GQ79YXeCce3EQhoCB5ECXIY0nLb8HkN9yB4rgSSSJKVJ5sxBLtFuXc5lsw4eb10lPU2d7i5QHMWXg3LKUfuNHoFUlA9RMI3XXTHQg9m3hADe3PXGfKgr9RYs-4GPlOtWh-oHilm_Fxa6W-vu9v_e8w9q4iDclrtJJcQ942o-Qy4bc8beTG3hrHj0FK3TdepAiFQRUTBZDbU5JpqVLcb-Ksnrnn6xqCD2XS5igkcqwcZn3dJK0zshKJYc_0wrnqe8cDVWFj6ION7L2uhXzV-yIbAwsfmgVzl_FncreZH4eaqTAmpytJcHxLMh6Y8jh2F8JK2PtREpggGDEOyscKQWs86yFuPd7PW3imgSzMD2f3wCpx72LIV0MNyVV4aereaIZgwlAUVJIwniMx-r6oIy2ZEn3HPHK_bvZvUnjA8jwTYr8QpXtwqA1oTPwEymBxrsgw-CNR9J2HNkWYIuf86uZSMB8JKn_Z4mj84s9t-W10jXNQG_njLu-U02frp9LWx7jEfVjO9gEAxvbGnKWpZ1tIhjBNkClKwhz4qr4Ni3mqx5kKMuhJ0QPYkNFgQVfzA7vZI73WUcp270SnlRSBZj8MF5Sq05nuyatX3jGjnQSLgS3cDTwWXHbiEXzQJE558HLnWAUF5cqPskpBguMFu2dTCVHNTyaOwJs04RZw6d6UjLY17596_OjiYetdbHgzdH3JM5GTzSA4h_GlumfkFJDABVT8nooEwXGaJKnYmoNawXiWVEJes8QTAPVlt7KSrrNLa1kb5AeA-lbZYxP1MFkeE2tT0NNBF0AzYLJPjRZThmGojIv_gwo5mzEsB69OY2hkPkg1fvmuluh9Dr2H7Mlp_lET6pYv9k7SZMHBcos3U9faCwKrthyrDG3fGR_ZLfsXz802Qf1P0Z_0hUout5-8c_wXr9tbJrdJetyFQuSV-Nqzqbg_VmRRiSZA4T6xJWrlFood0T8v9ExvwPoE4AqGL_PrW-Dz5jO2fQjQaWFIPfbuWiGhtwQcsQJJsaxd1MgynIA1GyusmysiFzeRrva6wudUhpD7y4XrsEsiMJuO9OY6MHXM_2gl4wmIch-oGKHPWucsPwv-5FA0QjCygEF4274mw7f2MtqmVDWisPp507-EafloqfWD_YC-LQpqrWpn9wIVvD68zFuE4RS8MfrbPKAXujTfJOpVISouXTqF0V-msfJ_8NHYGRu1n6S7B73r8DQeASXxb1xMiQiGgaeRSbpfir_2hzEkwceao3OZM7JXWY-kJdmALWw3TlsUyEWO2N0USErbhDABngOhTDEQEum_9KuIh-EriBvbq22lxiDv3tPIgec84PgJlTHAUmdxyTUftIq3Qj8_F3p49KC4iWQWwTS77A-R-wtAIfplcUO4LGukc5buSAdgWJ2LC42GlKuj_7gdB0jK1AVeoSgU1gsn8ZG_Xr6UDwD-Fxsq9CiOwpTjkqpyK-si6mBeifgYWcav8_CvDvdcsrVlGoCeBQoVMqWJMC8HQle8Nqx8dI9tEr5NAXpLq3kW0ouXwOSbChMmhCvu6C3GyR4kH-VBtjMnomw3fCGWlgCZUybYJ-_hdDpnbzLAYlMVzKKQ9IEfXdxdN_nevEDOWicdVc6-RT7aSWqOTy4IW6s0jle4wFfIgmHS4jIB_RxtFupRwcy4ELppM7n3Xi-SsLdzxSz5TMVUzWy2xbyGoLjVkdmOx0skFg.whz2Q-9Kh5E3IwMh8ax2pg'
  }
}